version: '3.8'

services:
  # Here we have six Redis containers with Cluster mode enabled,
  # three of them will work as master nodes and each one of
  # will have a replica, so in case of failures, the replica becomes the master.
  # They are configured by the `cluster_initiator` container.
  redis_1:
    image: 'redis:7.0.5'
    container_name: redis_1
    ports:
      - "53219:6379"
    volumes:
      - redis_1_data:/data
    command: redis-server --bind 0.0.0.0 --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.2

  redis_2:
    image: 'redis:7.0.5'
    container_name: redis_2
    ports:
      - "53220:6379"
    volumes:
      - redis_2_data:/data
    command: redis-server --bind 0.0.0.0 --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.3

  redis_3:
    image: 'redis:7.0.5'
    container_name: redis_3
    ports:
      - "53221:6379"
    volumes:
      - redis_3_data:/data
    command: redis-server --bind 0.0.0.0 --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.4

  redis_4:
    image: 'redis:7.0.5'
    container_name: redis_4
    ports:
      - "6379"
    volumes:
      - redis_4_data:/data
    command: redis-server --bind 0.0.0.0 --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.5

  redis_5:
    image: 'redis:7.0.5'
    container_name: redis_5
    ports:
      - "6379"
    volumes:
      - redis_5_data:/data
    command: redis-server --bind 0.0.0.0 --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.6

  redis_6:
    image: 'redis:7.0.5'
    container_name: redis_6
    ports:
      - "6379"
    volumes:
      - redis_6_data:/data
    command: redis-server --bind 0.0.0.0 --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.7

  # Ephemeral container to create the Redis cluster connections.
  # Once the setup is done, this container shuts down
  cluster_initiator:
    image: 'redis:7.0.5'
    container_name: cluster_initiator
    tty: true
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
    command: bash -c "sleep 5 && echo 'yes' | redis-cli --cluster create \
      173.18.0.2:6379 \
      173.18.0.3:6379 \
      173.18.0.4:6379 \
      173.18.0.5:6379 \
      173.18.0.6:6379 \
      173.18.0.7:6379 \
      --cluster-replicas 1
      echo 'ðŸš€ Redis cluster ready.' "
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.8

  # Web UI to browse through our Redis data across all nodes
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_web
    environment:
      REDIS_HOSTS: "local:redis_1:6379,local:redis_2:6379,local:redis_3:6379"
    ports:
      - "5051:8081"
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
      - cluster_initiator
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.9

  casdoor:
    restart: always
    build:
      context: ../
      dockerfile: Dockerfile
      target: STANDARD
    entrypoint: /bin/sh -c './server --createDatabase=true'
    ports:
      - "8010:8000"
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
      - db
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.10
    environment:
      RUNNING_IN_DOCKER: "true"
    volumes:
      - ./conf:/conf/
  db:
    restart: always
    image: mysql:5.7
    platform: linux/amd64
    ports:
      - "3316:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.11

  redis_tester:
    build:
      context: ./redis-test
      dockerfile: Dockerfile
      target: STANDARD
    entrypoint: /bin/sh -c './server -c ./conf/config.yml'
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
    volumes:
      - ./conf:/conf/
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.12

volumes:
  redis_1_data: {}
  redis_2_data: {}
  redis_3_data: {}
  redis_4_data: {}
  redis_5_data: {}
  redis_6_data: {}
  mysql_data: {}

# Rename the default network so we can easily identify it
# Across all containers
networks:
  redis_cluster_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.18.0.0/16